unit Controller.Vendas;

interface

uses
  FireDAC.Comp.Client;

type
  TVendas = class
  private
    FConexao: TFDConnection;
    QryVendas: TFDQuery;
    FDataVenda: TDateTime;
    FPrecoVenda: Double;
    FQtd: Double;
    FId_Bomba: Integer;
    FId_Venda: Integer;
    FHoraVenda: TDateTime;
    FTotalVenda: Double;
    FPercentualImposto: Double;
    FExisteVendaNoPeriodo: Boolean;

  public
    function CarregarVendas: TFDQuery;
    function RelVendas(ADtInicial, ADtFinal: TDateTime): TFDQuery;
    constructor Create(AConexao: TFDConnection);
    destructor Destroy; override;
    property Id_Venda: Integer read FId_Venda write FId_Venda;
    property Id_Bomba: Integer read FId_Bomba write FId_Bomba;
    property Qtd: Double read FQtd write FQtd;
    property PrecoVenda: Double read FPrecoVenda write FPrecoVenda;
    property PercentualImposto: Double read FPercentualImposto write FPercentualImposto;
    property TotalVenda: Double read FTotalVenda write FTotalVenda;
    property DataVenda: TDateTime read FDataVenda write FDataVenda;
    property HoraVenda: TDateTime read FHoraVenda write FHoraVenda;
    property ExisteVendaNoPeriodo: Boolean read FExisteVendaNoPeriodo write FExisteVendaNoPeriodo;
  end;

implementation

uses
  uUtil;
{ TVenda }

function TVendas.CarregarVendas: TFDQuery;
begin
  QryVendas.Connection := FConexao;
  {$REGION 'SELECT VENDAS'}
  QryVendas.Close;
  QryVendas.SQL.Clear;
  QryVendas.SQL.Add('SELECT ');
  QryVendas.SQL.Add('  V.ID_VENDA, ');
  QryVendas.SQL.Add('  V.ID_BOMBA, ');
  QryVendas.SQL.Add('  V.QTD, ');
  QryVendas.SQL.Add('  V.PRECOVENDA, ');
  QryVendas.SQL.Add('  V.PERCENTUALIMPOSTO, ');
  QryVendas.SQL.Add('  V.TOTALVENDA, ');
  QryVendas.SQL.Add('  V.DATAVENDA, ');
  QryVendas.SQL.Add('  V.HORAVENDA, ');
  QryVendas.SQL.Add('  P.DESCRICAO ');
  QryVendas.SQL.Add('FROM VENDAS V');
  QryVendas.SQL.Add('INNER JOIN CAD_BOMBAS B ON B.ID_BOMBA = V.ID_BOMBA');
  QryVendas.SQL.Add('INNER JOIN CAD_PRODUTO P ON P.ID_PRODUTO = B.ID_PRODUTO');
  QryVendas.SQL.Add('WHERE DATA VENDA = CURRENT_DATE');

  QryVendas.Sql.SaveToFile(DiretorioPadraoLogs + 'QryVendas.sql');
  {$ENDREGION}
  QryVendas.Open;

  Result := QryVendas;
end;

constructor TVendas.Create(AConexao: TFDConnection);
begin
  FConexao := AConexao;
  QryVendas := TFDQuery.Create(nil);
end;

destructor TVendas.Destroy;
begin
  QryVendas.Free;
  inherited;
end;

function TVendas.RelVendas(ADtInicial, ADtFinal: TDateTime): TFDQuery;
begin
  QryVendas.Connection := FConexao;
  {$REGION 'SELECT REL VENDAS'}
  QryVendas.Close;
  QryVendas.SQL.Clear;
  QryVendas.SQL.Add('SELECT ');
  QryVendas.SQL.Add('  V.ID_VENDA, ');
  QryVendas.SQL.Add('  V.ID_BOMBA, ');
  QryVendas.SQL.Add('  V.QTD, ');
  QryVendas.SQL.Add('  V.PRECOVENDA, ');
  QryVendas.SQL.Add('  V.PERCENTUALIMPOSTO, ');
  QryVendas.SQL.Add('  V.TOTALVENDA, ');
  QryVendas.SQL.Add('  V.DATAVENDA, ');
  QryVendas.SQL.Add('  V.HORAVENDA, ');
  QryVendas.SQL.Add('  P.DESCRICAO ');
  QryVendas.SQL.Add('FROM VENDAS V');
  QryVendas.SQL.Add('INNER JOIN CAD_BOMBAS B ON B.ID_BOMBA = V.ID_BOMBA');
  QryVendas.SQL.Add('INNER JOIN CAD_PRODUTO P ON P.ID_PRODUTO = B.ID_PRODUTO');
  QryVendas.SQL.Add('WHERE V.datavenda between :pDTINCIAL and :pDTFINAL ');
  QryVendas.ParamByName('pDTINCIAL').AsDateTime := ADtInicial;
  QryVendas.ParamByName('pDTFINAL').AsDateTime := ADtFinal;
  QryVendas.Sql.SaveToFile(DiretorioPadraoLogs + 'QryRelVendas.sql');
  {$ENDREGION}
  QryVendas.Open;

  Result := QryVendas;

  if QryVendas.RecordCount = 0 then
    FExisteVendaNoPeriodo := False;
end;

end.
